{"version":3,"sources":["Form.js","Item.js","List.js","App.js","index.js"],"names":["Form","props","React","useState","tmpTodo","setTmpTodo","TextField","type","name","onChange","e","target","value","label","style","marginRight","Button","variant","color","verticalAlign","onClick","preventDefault","console","log","length","addTodo","Item","id","isDone","number","content","deleteTodo","toggleIsDone","buttonText","ListItem","backgroundColor","ListItemText","primary","edge","IconButton","aria-label","Divider","List","todos","Items","map","todo","i","key","ItemWrapper","styled","ul","AppWrapper","div","GlobalStyle","createGlobalStyle","reset","ReactDOM","render","setTodos","newTodoItem","concat","newTodos","filter","document","getElementById"],"mappings":"sPAMe,SAASA,EAAKC,GAAO,MAYJC,IAAMC,SAAS,IAZX,mBAY3BC,EAZ2B,KAYlBC,EAZkB,KAclC,OACE,oCACE,8BACE,kBAACC,EAAA,EAAD,CACAC,KAAK,OACLC,KAAK,OACLC,SAAU,SAAAC,GAAC,OAAIL,EAAWK,EAAEC,OAAOC,QACnCA,MAAOR,EACPS,MAAM,8CACNC,MAAO,CAACC,YAAa,UAGrB,kBAACC,EAAA,EAAD,CACAT,KAAK,SACLU,QAAQ,YACRC,MAAM,UACNJ,MAAO,CAACK,cAAe,UACvBC,QAAS,SAACV,GAAD,OA7Bf,SAAiBA,GACfA,EAAEW,iBAEFC,QAAQC,IAAI,gBACRnB,EAAQoB,OAAS,GACnBvB,EAAMwB,QAAQrB,EAASC,GAwBLoB,CAAQf,KALxB,kB,uDCrBO,SAASgB,EAAT,GAA0E,IAA1DC,EAAyD,EAAzDA,GAAIC,EAAqD,EAArDA,OAAQC,EAA6C,EAA7CA,OAAQC,EAAqC,EAArCA,QAASC,EAA4B,EAA5BA,WAAYC,EAAgB,EAAhBA,aAChEC,EAAaL,EAAS,uCAAW,iCACvC,OACE,oCACE,kBAACM,EAAA,EAAD,CAAUpB,MAAO,CAACqB,gBAAiB,UACjC,kBAACC,EAAA,EAAD,CAAcC,QAAO,UAAKR,EAAO,EAAZ,iBAAiBC,KACtC,kBAACd,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAOU,EAAS,YAAc,UAAWU,KAAK,MAAMlB,QAAS,kBAAMY,EAAaL,KAAMM,GAClH,kBAACM,EAAA,EAAD,CAAYD,KAAK,MAAME,aAAW,SAASpB,QAAS,kBAAMW,EAAWJ,KACnE,kBAAC,IAAD,QAGJ,kBAACc,EAAA,EAAD,O,gNChBS,SAASC,EAAT,GAAkD,IAAnCC,EAAkC,EAAlCA,MAAOZ,EAA2B,EAA3BA,WAAYC,EAAe,EAAfA,aAE/CV,QAAQC,IAAIoB,GAEZ,IAAMC,EAAQD,EAAME,IAAI,SAACC,EAAMC,GAAP,OACtB,kBAACrB,EAAD,CAGEsB,IAAKF,EAAKnB,GACVA,GAAImB,EAAKnB,GACTC,OAAQkB,EAAKlB,OACbC,OAAQkB,EACRjB,QAASgB,EAAKhB,QACdC,WAAYA,EACZC,aAAcA,MAIZiB,EAAcC,UAAOC,GAAV,KAUjB,OACE,oCAIE,kBAACF,EAAD,KAGGL,I,oWC/BT,IAAMQ,EAAaF,UAAOG,IAAV,KAYVC,EAAcC,4BAAH,IACbC,KClBJC,IAASC,OACP,kBDqBK,WAAgB,IAAD,EACMvD,mBAAS,IADf,mBACbwC,EADa,KACNgB,EADM,KAqCpB,OAEE,oCACE,kBAACL,EAAD,MACA,kBAACF,EAAD,KACE,4CACA,kBAACpD,EAAD,CAAMyB,QAxCI,SAACrB,EAASC,GACxB,IAAMuD,EAAc,CAClBjC,GAAIgB,EAAMnB,OAAS,EACnBM,QAAS1B,EACTwB,QAAQ,GAEV+B,EAAShB,EAAMkB,OAAOD,IACtBvD,EAAW,OAkCP,kBAACqC,EAAD,CAAMC,MAAOA,EAAOZ,WA5BP,SAAAJ,GACjB,IAAMmC,EAAWnB,EAAMoB,OAAO,SAACjB,GAE7B,OAAOnB,IAAOmB,EAAKnB,KAGrBgC,EAASG,IAsBuC9B,aAnB7B,SAAAL,GACnB,IAAMmC,EAAWnB,EAAME,IAAI,SAACC,GAI1B,OAHInB,IAAOmB,EAAKnB,KACdmB,EAAKlB,QAAUkB,EAAKlB,QAEfkB,IAGTa,EAASG,SCtDX,MACAE,SAASC,eAAe,W","file":"static/js/main.679c4ea6.chunk.js","sourcesContent":["import React from 'react'\nimport Button from '@material-ui/core/Button'\nimport TextField from '@material-ui/core/TextField';\n\n\n\nexport default function Form(props) {\n\n  function addTodo(e) {\n    e.preventDefault();\n\n    console.log('実行');\n    if (tmpTodo.length > 0) { \n      props.addTodo(tmpTodo, setTmpTodo) \n    }\n    // TODO: 空や空欄の場合エラーメッセージを表示する処理\n  }\n\n  const [tmpTodo, setTmpTodo] = React.useState(\"\")\n\n  return (\n    <>\n      <form>\n        <TextField \n        type=\"text\" \n        name=\"desc\"\n        onChange={e => setTmpTodo(e.target.value)}\n        value={tmpTodo}\n        label=\"タイトル ※必須\"\n        style={{marginRight: \"10px\"}}\n        />\n\n        <Button \n        type=\"submit\" \n        variant=\"contained\" \n        color=\"primary\" \n        style={{verticalAlign: \"bottom\"}}\n        onClick={(e) => addTodo(e)}>追加</Button>\n\n      </form>\n    </>\n  )\n}","import React from \"react\"\n\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Divider from '@material-ui/core/Divider';\nimport Button from '@material-ui/core/Button'\n\n\n\nexport default function Item({ id, isDone, number, content, deleteTodo, toggleIsDone }) {\n  const buttonText = isDone ? \"未完了にする\" : \"完了にする\"\n  return (\n    <>\n      <ListItem style={{backgroundColor: \"white\"}}>\n        <ListItemText primary={`${number+1}：${content}`} />\n        <Button variant=\"contained\" color={isDone ? \"secondary\" : \"default\"} edge=\"end\" onClick={() => toggleIsDone(id)}>{buttonText}</Button>\n        <IconButton edge=\"end\" aria-label=\"delete\" onClick={() => deleteTodo(id)} >\n          <DeleteIcon />\n        </IconButton>\n      </ListItem>\n      <Divider />\n    </>\n  )\n}","import React from 'react'\nimport styled from 'styled-components'\n\nimport Item from './Item'\n\n\nexport default function List({todos, deleteTodo, toggleIsDone}) {\n  // mapの第二引数はインデックスを受け取ることができる\n  console.log(todos);\n  \n  const Items = todos.map((todo, i) => (\n    <Item\n      // keyをつけないとエラーに近い警告メッセージが出る\n      // 何番目の要素なのかわかりやすくするため\n      key={todo.id}\n      id={todo.id}\n      isDone={todo.isDone}\n      number={i} // 番号を付ける用\n      content={todo.content}\n      deleteTodo={deleteTodo}\n      toggleIsDone={toggleIsDone}\n    />\n  )) \n\n  const ItemWrapper = styled.ul`\n    width: 60%;\n    @media screen and (max-width:480px) {\n      width: 90%;\n    }\n    margin: 15px auto;\n    text-align: center;\n  `\n  \n\n  return (\n    <>\n      {/* {Items.length > 0 && <Divider style={{ height: \"5px\", width: \"60%\", backgroundColor: \"blue\", margin: \"10px auto 20px\" }} />} */}\n      {/* ↑いらない説 */}\n      \n      <ItemWrapper>\n        {/* つまりItemsは以下のような構造のはず。しかしエラーになる。配列にするなってエラー */}\n        {/* {<Items id={1} content={\"hogehgoe\"} />, <Items id={1} content={\"hogehgoe\"} />} */}\n        {Items}\n      </ItemWrapper>\n    </>\n  )\n}","import React, { useState } from 'react'\nimport styled, { createGlobalStyle } from 'styled-components'\nimport reset from \"styled-reset\";\n\nimport Form from './Form'\nimport List from './List'\n\n\n\n// この中にcssを書いていく。\n//以下の例はdivタグに当てるためのcss\nconst AppWrapper = styled.div`\n  text-align: center;\n  width: 100vw;\n  min-height: 100vh;\n  background-color: skyblue;\n  h1 {\n    font-size: 50px;\n    padding: 30px;\n    font-family: 'Bangers', cursive;\n  }\n`\n\nconst GlobalStyle = createGlobalStyle`\n  ${reset}\n  /* other styles */\n`\n\nexport function App() {\n  const [todos, setTodos] = useState([])\n\n  const addTodo = (tmpTodo, setTmpTodo) => {\n    const newTodoItem = {\n      id: todos.length + 1,\n      content: tmpTodo,\n      isDone: false\n    }\n    setTodos(todos.concat(newTodoItem))\n    setTmpTodo('')\n  }\n\n\n\n  // 特定のtodoを除いた新しい配列todosを作成する\n  const deleteTodo = id => {\n    const newTodos = todos.filter((todo) => {\n      // 以下の条件に当てはまるもののみの配列を新たに作成\n      return id !== todo.id\n    })\n\n    setTodos(newTodos)          \n  }\n\n  const toggleIsDone = id => {\n    const newTodos = todos.map((todo) => {\n      if (id === todo.id) {        \n        todo.isDone = !todo.isDone\n      } \n      return todo\n    })\n\n    setTodos(newTodos)\n  }\n\n  \n  return (\n    // 定義したAppWrapperをここで使う。\n    <>\n      <GlobalStyle />\n      <AppWrapper>\n        <h1>My Todo List</h1>\n        <Form addTodo={addTodo} />\n        <List todos={todos} deleteTodo={deleteTodo} toggleIsDone={toggleIsDone} />\n      </AppWrapper>\n    </>\n  )\n}\n\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\n\nimport {App} from './App'\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}