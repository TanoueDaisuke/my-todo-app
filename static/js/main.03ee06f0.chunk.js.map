{"version":3,"sources":["Form.js","Item.js","List.js","App.js","index.js"],"names":["Form","props","React","useState","tmpTodo","setTmpTodo","TextField","type","name","onChange","e","target","value","label","style","marginRight","Button","variant","color","verticalAlign","onClick","preventDefault","console","log","length","addTodo","Item","id","isDone","number","content","deleteTodo","toggleIsDone","updateTodo","isEdit","setIsEdit","buttonText","ListItem","backgroundColor","width","input","document","getElementById","ListItemText","primary","IconButton","edge","aria-label","contentText","display","fontSize","Divider","List","todos","Items","map","todo","i","key","ItemWrapper","styled","ul","AppWrapper","div","GlobalStyle","createGlobalStyle","reset","ReactDOM","render","setTodos","checked","setChecked","newTodoItem","concat","FormControlLabel","control","Checkbox","filter","newTodos","updateNewTodos"],"mappings":"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","file":"static/js/main.03ee06f0.chunk.js","sourcesContent":["import React from 'react'\nimport Button from '@material-ui/core/Button'\nimport TextField from '@material-ui/core/TextField';\n\n\n\nexport default function Form(props) {\n\n  function addTodo(e) {\n    e.preventDefault();\n\n    console.log('実行');\n    if (tmpTodo.length > 0) { \n      props.addTodo(tmpTodo, setTmpTodo) \n    }\n    // TODO: 空や空欄の場合エラーメッセージを表示する処理\n  }\n\n  const [tmpTodo, setTmpTodo] = React.useState(\"\")\n\n  return (\n    <>\n      <form>\n        <TextField \n          type=\"text\" \n          name=\"desc\"\n          onChange={e => setTmpTodo(e.target.value)}\n          value={tmpTodo}\n          label=\"タイトル ※必須\"\n          style={{marginRight: \"10px\"}}\n        />\n\n        <Button \n          type=\"submit\" \n          variant=\"contained\" \n          color=\"primary\" \n          style={{verticalAlign: \"bottom\"}}\n          onClick={(e) => addTodo(e)}\n        >\n          追加\n        </Button>\n\n      </form>\n    </>\n  )\n}","import React from \"react\"\n\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport EditIcon from '@material-ui/icons/Edit'\nimport Divider from '@material-ui/core/Divider';\nimport Button from '@material-ui/core/Button'\nimport TextField from '@material-ui/core/TextField';\n\n\nexport default function Item({ id, isDone, number, content, deleteTodo, toggleIsDone, updateTodo }) {\n  const [isEdit, setIsEdit] = React.useState(false)\n\n  const buttonText = isDone ? \"未完了にする\" : \"完了にする\"\n\n  const contentText = () => {\n    if (isEdit) {\n      const handleClick = () => {\n        const input = document.getElementById('outlined-basic')\n        updateTodo(id, input.value)\n        setIsEdit(false)\n      }\n      return (\n        <>\n          <TextField id=\"outlined-basic\" label={content} variant=\"outlined\" style={{width: \"65%\", marginRight: 5}} />\n          <Button color=\"primary\" variant=\"contained\" onClick={handleClick}>保存</Button>\n        </>\n      )\n    } else {\n      return (\n        <>\n          <ListItemText primary={`${number+1}：${content}`} />\n          <IconButton \n            edge=\"end\" \n            aria-label=\"delete\" \n            style={{marginRight: 5}}  \n            onClick={() => setIsEdit(true)}\n          >\n            <EditIcon />\n          </IconButton>\n        </>\n      )\n    }\n  }\n\n  \n  return (\n    <>\n      <ListItem style={{backgroundColor: \"white\"}}>\n        {contentText()}\n        <Button \n          variant=\"contained\" \n          color={isDone ? \"secondary\" : \"default\"} \n          edge=\"end\" \n          style={{display: isEdit ? \"none\" : \"block\", fontSize: 11}}\n          onClick={() => toggleIsDone(id)}\n        >\n          {buttonText}\n        </Button>\n        <IconButton edge=\"end\" aria-label=\"delete\" onClick={() => deleteTodo(id)} >\n          <DeleteIcon />\n        </IconButton>\n      </ListItem>\n      <Divider />\n    </>\n  )\n}","import React from 'react'\nimport styled from 'styled-components'\n\nimport Item from './Item'\n\n\nexport default function List({todos, deleteTodo, toggleIsDone, updateTodo}) {\n  // mapの第二引数はインデックスを受け取ることができる\n  const Items = todos.map((todo, i) => (\n    <Item\n      // keyをつけないとエラーに近い警告メッセージが出る\n      // 何番目の要素なのかわかりやすくするため\n      key={todo.id}\n      id={todo.id}\n      isDone={todo.isDone}\n      number={i} // 番号を付ける用\n      content={todo.content}\n      deleteTodo={deleteTodo}\n      toggleIsDone={toggleIsDone}\n      updateTodo={updateTodo}\n    />\n  )) \n\n  const ItemWrapper = styled.ul`\n    width: 60%;\n    @media screen and (max-width:480px) {\n      width: 90%;\n    }\n    margin: 15px auto;\n    text-align: center;\n  `\n  \n\n  return (\n    <>\n      <ItemWrapper>\n        {Items}\n      </ItemWrapper>\n    </>\n  )\n}","import React, { useState } from 'react'\nimport styled, { createGlobalStyle } from 'styled-components'\nimport reset from \"styled-reset\";\n\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nimport Form from './Form'\nimport List from './List'\n\n\n// この中にcssを書いていく。\n//以下の例はdivタグに当てるためのcss\nconst AppWrapper = styled.div`\n  text-align: center;\n  width: 100vw;\n  min-height: 100vh;\n  background-color: skyblue;\n  h1 {\n    font-size: 50px;\n    padding: 30px;\n    font-family: 'Bangers', cursive;\n  }\n`\n\nconst GlobalStyle = createGlobalStyle`\n  ${reset}\n`\n\nexport function App() {\n  const [todos, setTodos] = useState([])\n  const [checked, setChecked] = React.useState(false)\n\n  const addTodo = (tmpTodo, setTmpTodo) => {\n    const newTodoItem = {\n      id: todos.length + 1,\n      content: tmpTodo,\n      isDone: false\n    }\n    setTodos(todos.concat(newTodoItem))\n    setTmpTodo('')\n  }\n\n  // 特定のtodoを除いた新しい配列todosを作成する\n  const deleteTodo = id => {\n    const newTodos = todos.filter((todo) => {\n      // 以下の条件に当てはまるもののみの配列を新たに作成\n      return id !== todo.id\n    })\n    setTodos(newTodos)          \n  }\n\n  const toggleIsDone = id => {\n    const newTodos = todos.map((todo) => {\n      if (id === todo.id) {        \n        todo.isDone = !todo.isDone\n      } \n      return todo\n    })\n    setTodos(newTodos)\n  }\n\n  const updateTodo = (id, value) => {\n    const updateTodo = {\n      id: id,\n      content: value\n    }\n    const updateNewTodos = todos.map(todo => {\n      if (todo.id === id) {\n        return updateTodo\n      } else {\n        return todo\n      }\n    })\n    setTodos(updateNewTodos)\n  }\n\n  const showOnlyDoneCheckBox = () => {\n    if (todos.length === 0) {\n      return;\n    } else {\n      return (\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={checked}\n              onChange={() => setChecked(!checked)}\n              color=\"primary\"\n            />\n          }\n          label=\"未完了のみ表示\"\n        />\n      )\n    }\n  }\n\n  const showTodos = () => {\n    if (checked) {\n      const notDoneTodos = todos.map(todo => todo.isDone ? null : todo) // 完了のものは非表示\n      return notDoneTodos.filter(todo => todo) //undefined, nullを除く\n    } else {\n      return todos\n    }\n  }\n\n  \n  return (\n    // 定義したAppWrapperをここで使う。\n    <>\n      <GlobalStyle />\n      <AppWrapper>\n        <h1>My Todo List</h1>\n        <Form addTodo={addTodo} />\n        {showOnlyDoneCheckBox()}\n        <List \n          todos={showTodos()} \n          deleteTodo={deleteTodo} \n          toggleIsDone={toggleIsDone} \n          updateTodo={updateTodo} \n        />\n      </AppWrapper>\n    </>\n  )\n}\n\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\n\nimport {App} from './App'\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}